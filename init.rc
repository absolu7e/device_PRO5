import /init.recovery.${ro.hardware}.rc

on early-init
    # Apply strict SELinux checking of PROT_EXEC on mmap/mprotect calls.
    write /sys/fs/selinux/checkreqprot 0

    # Set the security context for the init process.
    # This should occur before anything else (e.g. ueventd) is started.
    setcon u:r:init:s0

    start ueventd
    start healthd

on init
    export PATH /sbin:/system/bin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc
    symlink /data/media/0 /sdcard
    symlink /sbin/busybox /sbin/sh
    symlink /sbin/busybox /sbin/ls
    symlink /sbin/busybox /sbin/cd
    symlink /sbin/busybox /sbin/cat

    mkdir /ram0
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /custom
    mkdir /efs
    mkdir /sideload
    mkdir /storage
    mkdir /storage/sdcard1
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp
    chmod 0775 /sbin/busybox

    write /proc/sys/kernel/panic_on_oops 1

on fs
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 2A45
    write /sys/class/android_usb/android0/idProduct 0001
    write /sys/class/android_usb/android0/functions mass_storage
    write /sys/class/android_usb/android0/enable 1
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}


on boot

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_all_props_action
    load_all_props

# Indicate to fw loaders that the relevant mounts are up.
on firmware_mounts_complete
    rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_all_props_action

    # Remove a file to wake up anything waiting for firmware.
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

on property:sys.powerctl=*
   powerctl ${sys.powerctl}

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

#service healthd /sbin/healthd -r
#    critical
#    seclabel u:r:healthd:s0

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

#service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
#    disabled
#    socket adbd stream 660 system system
#    seclabel u:r:adbd:s0

# Always start adbd on userdebug and eng builds
# on property:ro.debuggable=1
#    write /sys/class/android_usb/android0/enable 1
#    start adbd

# Restart adbd so it can run as root
# on property:service.adb.root=1
#     write /sys/class/android_usb/android0/enable 0
#     restart adbd
#     write /sys/class/android_usb/android0/enable 1
